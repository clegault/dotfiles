# If you come from bash you might have to change your $PATH.
export PATH=$HOME/Library/Python/3.9/bin:$HOME/.local/bin:$HOME/bin:/usr/local/bin:/usr/local/opt/python/libexec/bin:/opt/homebrew/sbin:/opt/homebrew/bin:/usr/local/sbin/:~/Library/Python/3.8/bin:/usr/local/MacGPG2/bin/:$HOME/.rd/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH=~/.oh-my-zsh
#export fpath=(/usr/local/share/zsh-completions $fpath)
# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-zsh is loaded.
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
#ZSH_THEME="gallifrey"
#ZSH_THEME="spaceship"
ZSH_THEME="powerlevel10k/powerlevel10k"
# Set list of themes to load
# Setting this variable when ZSH_THEME=random
# cause zsh load theme from this variable instead of
# looking in ~/.oh-my-zsh/themes/
# An empty array have no effect
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
# plugins=(
#   git
#   zsh-nvm
#   zsh-syntax-highlighting
# )

plugins=( git git-extras gem bundler macos ruby rvm rails sudo sublime colorize history history-substring-search last-working-dir compleat zsh-completions zsh-history-substring-search zsh-autosuggestions zsh-syntax-highlighting warhol )

export DEFAULT_USER=`whoami`
TERM=xterm-256color

#POWERLEVEL9K_MODE='awesome-fontconfig'
#POWERLEVEL9K_PROMPT_ON_NEWLINE=true
#POWERLEVEL9K_PROMPT_ADD_NEWLINE=true
#POWERLEVEL9K_RPROMPT_ON_NEWLINE=true
#POWERLEVEL9K_SHORTEN_DIR_LENGTH=2
#POWERLEVEL9K_SHORTEN_STRATEGY="truncate_beginning"
#POWERLEVEL9K_RVM_BACKGROUND="black"
#POWERLEVEL9K_RVM_FOREGROUND="249"
#POWERLEVEL9K_RVM_VISUAL_IDENTIFIER_COLOR="red"
#POWERLEVEL9K_TIME_BACKGROUND="black"
#POWERLEVEL9K_TIME_FOREGROUND="249"
#POWERLEVEL9K_TIME_FORMAT="\UF43A %D{%H:%M  \UF133  %d.%m.%y}"
#POWERLEVEL9K_RVM_BACKGROUND="black"
#POWERLEVEL9K_RVM_FOREGROUND="249"
#POWERLEVEL9K_RVM_VISUAL_IDENTIFIER_COLOR="red"
#POWERLEVEL9K_STATUS_VERBOSE=false
#POWERLEVEL9K_VCS_CLEAN_FOREGROUND='black'
#POWERLEVEL9K_VCS_CLEAN_BACKGROUND='green'
#POWERLEVEL9K_VCS_UNTRACKED_FOREGROUND='black'
#POWERLEVEL9K_VCS_UNTRACKED_BACKGROUND='yellow'
#POWERLEVEL9K_VCS_MODIFIED_FOREGROUND='white'
#POWERLEVEL9K_VCS_MODIFIED_BACKGROUND='black'
#POWERLEVEL9K_COMMAND_EXECUTION_TIME_BACKGROUND='black'
#POWERLEVEL9K_COMMAND_EXECUTION_TIME_FOREGROUND='blue'
#POWERLEVEL9K_FOLDER_ICON='ï¼'
#POWERLEVEL9K_STATUS_OK_IN_NON_VERBOSE=true
#POWERLEVEL9K_STATUS_VERBOSE=false
#POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD=0
#POWERLEVEL9K_VCS_UNTRACKED_ICON='\u25CF'
#POWERLEVEL9K_VCS_UNSTAGED_ICON='\u00b1'
#POWERLEVEL9K_VCS_INCOMING_CHANGES_ICON='\u2193'
#POWERLEVEL9K_VCS_OUTGOING_CHANGES_ICON='\u2191'
#POWERLEVEL9K_VCS_COMMIT_ICON="\uf417"
#POWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX="%F{blue}\u256D\u2500%F{white}"
#POWERLEVEL9K_MULTILINE_SECOND_PROMPT_PREFIX="%F{blue}\u2570\uf460%F{white} "
#POWERLEVEL9K_DIR_WRITABLE_FORBIDDEN_FOREGROUND="015"
#POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(context os_icon ssh root_indicator dir dir_writable vcs)
#case "$OSTYPE" in
#  darwin*)
#    prompt_zsh_showStatus () {
        #musicapp=`osascript -e $'if application "Music" is running then\nreturn "running"\nelse\nreturn "nop"\nend if'`;
        #spotifyapp=`osascript -e $'if application "Spotify" is running then\nreturn "running"\nelse\nreturn "nop"\nend if'`;
        #sonosapp=`python3 ~/Desktop/sonos.py -p Den -c getstate`;
        #if [ $musicapp = "running" ]; then
        #  state=`osascript -e $'tell application "Music"\nget player state as string\nend tell'`;
        #  if [ $state = "playing" ]; then
        #    artist=`osascript -e $'tell application "Music"\nget artist of current track as string\nend tell'`;
        #    track=`osascript -e $'tell application "Music"\nget name of current track as string\nend tell'`;
        #    echo -n "â« $artist - $track";
        #  fi
        #elif [ $spotifyapp = "running" ]; then
        #  state=`osascript -e $'tell application "Spotify"\nget player state as string\nend tell'`;
        #  if [ $state = "playing" ]; then
        #    artist=`osascript -e $'tell application "Spotify"\nget artist of current track as string\nend tell'`;
        #    track=`osascript -e $'tell application "Spotify"\nget name of current track as string\nend tell'`;
        #    echo -n "â« $artist - $track";
        #  fi
        #elif [ $sonosapp = "running" ]; then
        #  state=`python3 ~/Desktop/sonos.py -p Den -c getsong`;
        #  echo -n "$state" | tr -d '\n';
        #else
        #  echo -n "No Music"
        #fi
#    }
    #POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status zsh_showStatus)
  #;;
  #linux*)
    #POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(command_execution_time  status rvm time)
  #;;
#esac

#
# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

if [[ "$(command -v gpgconf)" ]]; then
  export GPG_TTY="$(tty)"
  export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
  [ -d "~/.gnupg" ] && gpgconf --launch gpg-agent
  [[ -z "$REMOTE_CONTAINERS" ]] && echo UPDATESTARTUPTTY | gpg-connect-agent
  alias ssh 'gpg-connect-agent updatestartuptty /bye >/dev/null; ssh'
  alias scp 'gpg-connect-agent updatestartuptty /bye >/dev/null; scp'
fi
# SPACESHIP_PROMPT_ADD_NEWLINE="true"
# SPACESHIP_CHAR_SYMBOL=" \uf0e7"
# SPACESHIP_CHAR_PREFIX="\uf296"
# SPACESHIP_CHAR_SUFFIX=(" ")
# SPACESHIP_CHAR_COLOR_SUCCESS="yellow"
# SPACESHIP_PROMPT_DEFAULT_PREFIX="$USER"
# SPACESHIP_PROMPT_FIRST_PREFIX_SHOW="true"
# SPACESHIP_USER_SHOW="true"
ENABLE_CORRECTION="false"

alias zdocker='docker exec -it -w /workspaces/${PWD##*/} --env-file="${PWD}/.devcontainer/container.env" $(docker ps --filter "name=${PWD##*/}" --format "{{.ID}}") zsh'
alias sdocker='docker exec -it -w /workspaces/${PWD##*/} --env-file="${PWD}/.devcontainer/container.env" $(docker ps --filter "name=${PWD##*/}" --format "{{.ID}}") sh'
export CLICOLOR=1
autoload -U compinit && compinit
bindkey '\e[A' history-beginning-search-backward
bindkey '\e[B' history-beginning-search-forward
HIST_STAMPS="mm/dd/yyyy"
if [[ "$(command -v tmux)" ]]; then
  if (( $EUID != 0 )); then
      ZSH_TMUX_AUTOSTART="true"
      ZSH_TMUX_AUTOSTART_ONCE="true"
  fi
  ZSH_TMUX_AUTOQUIT="false"
fi
source $ZSH/oh-my-zsh.sh

# If the path_helper tool exists (i.e. on a Mac) then run it.
if [ -f "/usr/libexec/path_helper" ]; then
    eval $(/usr/libexec/path_helper -s)
fi

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/clegault/google-cloud-sdk/path.zsh.inc' ]; then source '/Users/clegault/google-cloud-sdk/path.zsh.inc'; fi
# The next line enables shell command completion for gcloud.
if [ -f '/Users/clegault/google-cloud-sdk/completion.zsh.inc' ]; then source '/Users/clegault/google-cloud-sdk/completion.zsh.inc'; fi

# ZSH auto-completion for kubernetes.
if [ $commands[kubectl] ]; then
  source <(kubectl completion zsh 2>/dev/null)
fi

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Source my personal (github.com/dwmkerr/dotfiles) configuration.
[ -r ~/.shell.sh ] && source ~/.shell.sh

autoload -U +X bashcompinit && bashcompinit

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"  # This loads nvm bash_completion


if [[ -f "~/.config/op/plugins.sh" ]]; then
  source ~/.config/op/plugins.sh
fi
unset -f ls
DISABLE_LS_COLORS="true"
alias ls='eza --icons=always -x --group-directories-first'
export EZA_CONFIG_DIR=~/.eza-themes/eza
if [[ "$(uname)" == "Darwin" ]]; then
  # The next line enables autojump profile 
  if [ -f /opt/homebrew/etc/profile.d/autojump.sh ]; then source '/opt/homebrew/etc/profile.d/autojump.sh'; fi
  if [ -f /usr/share/autojump/autojump.sh ]; then source '/usr/share/autojump/autojump.sh'; fi
  # Configure thefuck
  if [ -f '/opt/homebrew/bin/thefuck' ] || [ -f '/usr/local/bin/thefuck' ]; then eval $(thefuck --alias); fi

  complete -o nospace -C /opt/homebrew/bin/terraform terraform
  test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
  # Ensure "python3" command uses Homebrew's version
  alias python3=/opt/homebrew/bin/python3
  # OPTIONAL: Ensure "python" command uses Homebrew's version
  alias python=/opt/homebrew/bin/python
  # To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
  alias pip3=/opt/homebrew/bin/pip3
  alias pip=/opt/homebrew/bin/pip3
  alias cat=/opt/homebrew/bin/bat
  export GOROOT=/opt/homebrew/Cellar/go/1.24.4/libexec
else
  alias cat=/usr/bin/batcat
fi

[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
